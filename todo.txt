[HIGH PRIORITY]
- build external libraries statically to speed up compile time and to prevent recompilation of external source files
- review, correct and optimize rendering code in renderer.hpp/renderer.cpp
- reduce the file size (renderer.cpp/.hpp) and remove any unneccessary functions and comments
- integrate Vulkan into dokun-ui
- create a scrollbar and scrollarea
- create something similar to QML where C++ loads the instructions on creating the GUI from the Lua script and draws the GUI (See https://doc.qt.io/qt-6/qmlapplications.html).
- keep dokun-ui at a minumum C++ version of 11 for backwards compatibility with older compilers (it's a library after all and not an executable)

[MID PRIORITY]
- port dokun-ui to Android (where OpenGL ES or Vulkan will be used. See https://developer.android.com/guide/topics/graphics/opengl)

[LOW PRIORITY]
- precompile Lua script using the luac compiler to protect the script from plagiarism and rename the format from ".lua" to ".dlml" (meaning Dokun Lua Markup Language)
- maybe place this todo.txt in a docs/ folder

NOTE: `dokun-ui` is intended to be a simple to understand and "super" immediate-mode GUI toolkit with function names modelled after CSS.
